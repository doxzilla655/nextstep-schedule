import streamlit as st
import pandas as pd
from datetime import datetime
from io import BytesIO

# ‡πÇ‡∏´‡∏•‡∏î session_state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if 'schedule' not in st.session_state:
    st.session_state.schedule = []

st.title("üì∫ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏ú‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - NextStep TV")

# ======= INPUT FORM =======
with st.form("input_form"):
    col1, col2, col3 = st.columns(3)

    with col1:
        date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    with col2:
        time_slot = st.text_input("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 08:00-09:00)")
    with col3:
        program_title = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    program_type = st.selectbox(
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        ["‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÇ‡∏•‡∏Å", "animal show", "mysci", "new explorer", "doxzilla", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"]
    )

    submitted = st.form_submit_button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    if submitted:
        weekday_th = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡πÄ‡∏™‡∏≤‡∏£‡πå', '‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå']
        day_name = weekday_th[date.weekday()]
        date_th = f"{day_name} {date.day} {date.strftime('%b')} {str(date.year+543)[-2:]}"
        st.session_state.schedule.append({
            "date": date_th,
            "time": time_slot,
            "program": program_title,
            "type": program_type
        })

# ======= FUNCTION =======
def parse_time_slot(time_str):
    try:
        start_str, end_str = time_str.split('-')
        start = datetime.strptime(start_str.strip(), '%H:%M')
        end = datetime.strptime(end_str.strip(), '%H:%M')
        return start, end
    except:
        return None, None

def check_overlap(df_day):
    df_day = df_day.sort_values(by='start')
    overlaps = []
    for i in range(1, len(df_day)):
        if df_day.iloc[i]['start'] < df_day.iloc[i-1]['end']:
            overlaps.append((df_day.iloc[i-1]['program'], df_day.iloc[i]['program']))
    return overlaps

def highlight_row(row):
    color = {
        '‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÇ‡∏•‡∏Å': '#d1e7dd',
        'animal show': '#cfe2ff',
        'mysci': '#fce5cd',
        'new explorer': '#fde2e2',
        'doxzilla': '#e2e2e2',
        '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ': '#f8f9fa'
    }.get(row['type'], '#ffffff')
    return [f'background-color: {color}'] * len(row)

# ======= DISPLAY TABLE =======
if st.session_state.schedule:
    df = pd.DataFrame(st.session_state.schedule)
    df[['start', 'end']] = df['time'].apply(lambda t: pd.Series(parse_time_slot(t)))

    df_sorted = df.sort_values(by=['date', 'start'])
    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤)")
    st.dataframe(df_sorted.style.apply(highlight_row, axis=1), use_container_width=True)

    # ======= CHECK OVERLAP =======
    st.subheader("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô")
    warnings = []
    for date, group in df_sorted.groupby('date'):
        overlaps = check_overlap(group)
        for a, b in overlaps:
            warnings.append(f"üìÖ {date}: '{a}' ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö '{b}'")
    if warnings:
        for warn in warnings:
            st.error(warn)
    else:
        st.success("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤")

    # ======= DOWNLOAD BUTTON =======
    to_export = df_sorted.drop(columns=['start', 'end'])
    
buffer = BytesIO()
import io

buffer = io.BytesIO()

df = pd.DataFrame(st.session_state.schedule)  # üëà ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å session

to_export = df  # üëà ‡∏Å‡∏≥‡∏´‡∏ô‡∏î DataFrame ‡∏ó‡∏µ‡πà‡∏à‡∏∞ export

if not to_export.empty:
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        to_export.to_excel(writer, index=False, sheet_name="NextStep_Schedule")

    buffer.seek(0)

    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á Excel",
        data=buffer,
        file_name="schedule_nextstep.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏±‡∏î‡∏ú‡∏±‡∏á")
